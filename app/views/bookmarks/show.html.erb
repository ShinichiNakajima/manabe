<%= render "/shared/header" %>

<script>
// my funcs
String.prototype.replaceAll = function (a, b) {
  return this.split(a).join(b);
};
function intoSec (times) {
  if (times.indexOf(" ") != -1) {
    times = times.split(" ")[0];
  };
  times = times.split(":"), ret = 0
  if (times.length == 2) {
    return parseInt(times[0]) * 60 + parseInt(times[1]);
  } else {
    return parseInt(times[0]) * 3600 + parseInt(times[1]) * 60 + parseInt(times[2]);
  }
}


// 2. This code loads the IFrame Player API code asynchronously.
var tag = document.createElement('script');

tag.src = "https://www.youtube.com/iframe_api";
var firstScriptTag = document.getElementsByTagName('script')[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

// 3. This function creates an <iframe> (and YouTube player)
//    after the API code downloads.
var player;
function onYouTubeIframeAPIReady() {
  screenHeight = window.screen.height;
  screenWidth = window.screen.width;
  maybePC = screenHeight < screenWidth;
  player = new YT.Player('player', {
    height: 360,
    width: 640,
    videoId: '<%= Bookmark.find(params[:id]).url %>',
    events: {
      'onReady': onPlayerReady,
      'onStateChange': onPlayerStateChange
    }
  });
}

// 4. The API will call this function when the video player is ready.
function onPlayerReady(event) {
  player.playVideo();
}

// 5. The API calls this function when the player's state changes.
//    The function indicates that when playing a video (state=1),
//    the player should play for six seconds and then stop.
function onPlayerStateChange(event) {
}


window.addEventListener('load', () => {
  const honhe = document.getElementById("honhe").contentWindow;

  // ウィンドウのロードに成功した場合コメント投稿部を表示する＆時限式リロードを停止する
  honhe.document.getElementById("comment_sita").style.display = "block";
  clearInterval(ticktack);

  // タイムスタンプ部にジャンプ機能を付与
  var hhmms = [], tmp = honhe.document.getElementsByTagName("div");
  for (var i = 0; i < tmp.length; i++) {
    if (tmp[i].className == "hhmm") {
      hhmms.push(tmp[i])
    };
  };
  for (var i = 0; i < hhmms.length; i++) {
    (function(i){
      var theid = hhmms[i].id;
      var hm = intoSec(hhmms[i].innerText);
      hhmms[i].addEventListener("click", () => {
        player.seekTo(hm)
      })
    })(i);
  }

  // コメント投稿機能
  const submit = honhe.document.getElementById("sendbutton");
  submit.addEventListener("click", (e) => {
    e.preventDefault();
    const sentence = honhe.document.getElementById("sentence")
    if (sentence.value != '') {
      const sec = honhe.document.getElementById("sec");
      sec.value = player.getCurrentTime();
      const komeran = honhe.document.getElementById("comment_ue");
      const escaped_sentence = sentence.value.replaceAll("<", "＜").replaceAll(">", "＞")

      timeid = "t" + timefmt(sec.value).replaceAll(":", "_");
      divs = `<div class='timesentence'><div class='hhmm' id='${timeid}'>${timefmt(sec.value)}</div>&nbsp;<div class='kome' id='${timeid}_sentence'>${escaped_sentence}</div></div>`;
      komeran.insertAdjacentHTML("beforeend", divs);
      //最下部にスクロール
      komeran.scrollTo(0, komeran.scrollHeight)

      honhe.document.getElementById("comment_form").submit();
    };
    sentence.value = "";
  });
});

function timefmt (s) {
  s = parseInt(s);
  return parseInt(s / 3600) + ":" + zfill(parseInt(s % 3600 / 60)) + ":" + zfill(parseInt(s % 60))
}

function zfill (n) {
  if (n < 10) {
    return "0" + String(n);
  } else {
    return String(n);
  }
}

var cnt = 0, timeLimit = 2;
var ticktack = setInterval(function(){
  if (cnt++ >= timeLimit){
    location.reload();
  }
}, 1000);

</script>


<div class="showtime">
  <div class="moviefield">
    <div class="ytmovie">
      <div id="player"></div>
    </div>
    <div class="reloadplz" hidden>動画プレイヤーが表示されないときはページをリロードしてください（自動リロード機能試験運用中）</div>
  </div>
  <div class="commentfield" id="commentfield">
    <iframe frameborder="0" id="honhe" class="honhe" src=<%=bookmark_comments_path(@bookmark_id)%>>
  </div>
</div>